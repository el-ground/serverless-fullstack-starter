// metadata written to storage object
export interface FileMetadata {
  contentType: string
  userId: string
}

// internal file object!
export interface FileDocument {
  // vvvv static : bound to the document
  id: string
  userId: string // uploader
  createdAtSeconds: number
  // dynamic : access
  accessLevel: `public` | `private`
  // if accessLevel private, only signed url can access it.
  privateAccessLabels: string[]
  // vvvv static : bound to the binary
  // same ones in multer.file
  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/multer/index.d.ts
  path: string // path in storage
  size: number // size in bytes
  mimetype: string
  // generated by parsing mimetype
  type: string
  subtype: string
}

type KnownFileTypes = `image` | `video`

// shows the user directory; total number of files, total size of files
// total number of images, total number of videos, total number of other
// createdAtSeconds, userId
// why? -> might bill!
export interface UserFileDirectoryDocument {
  userId: string
  createdAtSeconds: number
  latestUpdatedAtSeconds: number
  totalCount: number
  totalSize: number
  // auto added from file mimeType
  typeCounts: Record<KnownFileTypes, number>
  typeSizes: Record<KnownFileTypes, number>
}
